Data structures:

The application uses arrays and the dynamic Object type in JavaScript. More complicated structures are built ad-hoc, there are no classes.

At the global scope there are 3 structs, app, showManager, and ui.

app:
	a small struct containing login id, current time, and other general app specific information.

ui:
	contains all the gui data in a big struct, this also is the only Object in which members are dynamically added. Update loops store temporary references to ui elements:
		ui.addButton = createTextButtonSprite("Add");
	In this way, ui functions like a hash map.

showManager:
	contains an array of Show's an array of Seat's for the currently selected show.

There's also a global array cart that contains CartEntry's.

Although there are no classes, there are 3 structs that are used in arrays and have a consistent layout.

Show:
	contains a show id, name, and date for a show.

Seat:
	contains the userId of the current owner (0 if none) and the price

CartEntry:
	contains the showId and seatIndex that the user wishes to purchase


Algorithms:

In the client we use linear iteration algorithms to get a show given a showId and to get the index of a show.

For animation we use a function called clampMap, that's a combination of normalization, interpolation, clamp, and ease.

For easing we use Robert Penner's easing equations from his 2001 publication.

This algorithm is commonly used:
	let col = index % COLS;
	let row = Math.floor(index / COLS);

It derives a 2 dimensional coordinate from a 1 dimensional array.
